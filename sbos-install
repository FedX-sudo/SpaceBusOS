#!/bin/sh
eddition=""
DE="none"
gpu="none"
root="."
timezone="America/Denver"
username="astronaut" 
shell="fish"
output_format="plain"
kernel="zen"
rootFS="btrfs"

reset=`tput sgr0`
black=`tput setaf 0`
red=`tput setaf 1`
green=`tput setaf 2`
orange=`tput setaf 3`
blue=`tput setaf 4 `
purple=`tput setaf 5`
teal=`tput setaf 6`
white=`tput setaf 7`
dullBlack=`tput setaf 8`
dullRed=`tput setaf 9`
dullGreen=`tput setaf 10`
dullOrange=`tput setaf 11`
dullBlue=`tput setaf 12`
dullPurple=`tput setaf 13`
dullTeal=`tput setaf 14`
dullWhite=`tput setaf 15`

clear
echo "$red This is the Alpha of the SpaceBusOS installer. Proeceed with caution. $reset"

usage()
{
cat << EOF
-h    | --help          Brings up this menu
-o    | --output        Defines the output format (plain, ISO, etc. See nixos-generators for more detail.
-l    | --list-DEs      list available desktops to install. 
EOF
}

listDEs()
{ 
cat << EOF
Available desktops to install:
* Plasma Desktop
* Plasma Mobile
* SwayWM
* i3wm
* xfce
EOF
}
while [ "$1" != "" ]; do
    case $1 in
        -l | --list-DEs ) listDEs
            exit
        ;;            
        -h | --help )    usage
            exit
        ;;
        -o | --output )
            outouput_format = $2
        * )              usage
            exit 1
    esac
    shift
done


echo "Available edditions:"
echo "Laptop"
echo "Desktop"
echo "tablet"
echo "phone"
echo "none"
read -p "Please select an eddition to use (${eddition}). " eddition
          
read -p "Would you like to use SpaceBus automatic partitioning (Y/n)? " askvar
case $askvar in   
    N|n|no|No|NO)
        echo "Manual partitioning selected."
        echo "Warning, auto-generated mount options may not work properly with manual partitioning"
       echo "------------------------------------------------------------------------------------"
        echo "Pleas do the following: "
        echo "  1. Format your disk(s) as you wish to." 
        echo "  2. Mount your root partition in /mnt/."
        echo "  3. Make a /mnt/boot partition."
        echo "  4. Mount your boot partition in /mnt/boot."
        echo "For more information see the NixOS guid on installing for more details:"
        echo "https://nixos.org/manual/nixos/stable/index.html#sec-installation"
        while :; do 
            read -p "Press enter to continue. "
            if cat /proc/mounts | grep "/mnt" && cat /proc/mounts | grep "/mnt/boot"; then
                echo "Proceeding with the install."
                break
            else 
                echo "The partitions have not been mounted, please mount them."
            fi
        done
            
        ;;
    *)
        sudo mkdir -p /mnt/boot
        lsblk
        read -p "Please select which disk you would like to format. (I.E. /dev/sda)" disk
         


    ;;

esac

case $eddition in
	"laptop"|"Laptop"|laptop)
		eddition="laptop"
         	echo "-------------------------------------------------------------------------------------"
	        echo "Please select which DE you would like to use. "
	        echo "Available DEs (for a full list run sbos-install --list (unavailable): " #TODO add that.
         	echo "-------------------------------------------------------------------------------------"
	        echo "Plasma Desktop"
	        echo "Sway WM (does not work with Nvidia cards)"
        	echo "i3wm"
		;;
	desktop|Desktop)
		eddition="desktop"
	        echo "-------------------------------------------------------------------------------------"
        	echo "Please select which DE you would like to use. "
	        echo "Available DEs (for a full list run sbos-install --list (unavailable): " #TODO add that.
        	echo "-------------------------------------------------------------------------------------"
	        echo "Plasma Desktop"
        	echo "Sway WM (does not work with Nvidia cards)"
	        echo "i3wm"
		;;
	tablet|Tablet)
		eddition="tablet"
		echo "-------------------------------------------------------------------------------------"
                echo "Please select which DE you would like to use. "
                echo "Available DEs (for a full list run sbos-install --list (unavailable): " #TODO add that.
                echo "-------------------------------------------------------------------------------------"
                echo "Plasma Desktop"
		echo "Plasma Mobile"
                echo "Sway WM (does not work with Nvidia cards)"
                echo "i3wm"
		;;
	phone|Phone)
		eddition="phone"
		echo "-------------------------------------------------------------------------------------"
                echo "Please select which DE you would like to use. "
                echo "Available DEs (for a full list run sbos-install --list (unavailable): " #TODO add that.
                echo "-------------------------------------------------------------------------------------"
                echo "Plasma Mobile"
                echo "Sway WM (does not work with Nvidia cards)"
                echo "i3wm"
		;;
        *)
		eddition="none"
		echo "$red Error: unrecognized eddition selected, assuming none $reset"
		;;
esac
read -p "DE to be used (none) " DE

if neofetch | rg "NVIDIA" ; then 
	echo "Auto detected $green Nvidia $reset GPU."
	read -p "Would you like to use proprietary Nvidia drivers (Y/n)?" askvar
	case $askvar in 
		n|N|No|NO|NO!|no!|no.)
			echo"not using proprietary Nvidia drivers."
			;;
		*) 
			echo "using proprietary Nvidia drivers." 
			gpu="nvidia"
			;;
	esac
fi
#clear
echo "-------------------------------------------------------------------------------"
echo "generating config... Please wait."
echo "-------------------------------------------------------------------------------"

echo "# Edit this configuration file to define what should be installed on" > ${root}/configuration.nix
echo "# your system.  Help is available in the configuration.nix(5) man page" >> ${root}/configuration.nix
echo "# and in the NixOS manual (accessible by running ‘nixos-help’)." >> ${root}/configuration.nix

echo "{ config, pkgs, ... }:" >> ${root}/configuration.nix

if [[ $gpu == "nvidia" ]]; then 
	echo "let #NOSYNC" >> ${root}/configuration.nix
	echo '  nvidia-offload = pkgs.writeShellScriptBin "nvidia-offload"  #NOSYNC' >> ${root}/configuration.nix
	echo "    export __NV_PRIME_RENDER_OFFLOAD=1 #NOSYNC" >> ${root}/configuration.nix
	echo "    export __NV_PRIME_RENDER_OFFLOAD_PROVIDER=NVIDIA-G0 #NOSYNC" >> ${root}/configuration.nix
	echo "    export __GLX_VENDOR_LIBRARY_NAME=nvidia #NOSYNC " >> ${root}/configuration.nix
        echo "    export __VK_LAYER_NV_optimus=NVIDIA_only #NOSYNC" >> ${root}/configuration.nix
	echo '    exec -a "$0" "$@" #NOSYNC"' >> ${root}/configuration.nix
  	echo "  ''; #NOSYNC " >> ${root}/configuration.nix
	echo "in #NOSYNC" >> ${root}/configuration.nix
fi

echo "$red WARNING: Crurntly SBOS only supportes UEFI boot, via Systemd boot, if you need legacy boot, edit the config before continueing." #TODO FIX THAT


echo "" >> ${root}/configuration.nix
echo "" >> ${root}/configuration.nix
echo "{" >> ${root}/configuration.nix
echo "  imports = "  >> ${root}/configuration.nix
echo "    [ " >> ${root}/configuration.nix
echo "      ./hardware-configuration.nix" >> ${root}/configuration.nix
echo "    ] " >> ${root}/configuration.nix
echo "  boot = { " >> ${root}/configuration.nix
echo "    kernelPackages = pkgs.linuxPackages_zen; " >> ${root}/configuration.nix
echo "    loader = { " >> ${root}/configuration.nix
echo "      systemd-boot.enable = true; " >> ${root}/configuration.nix
echo "      efi.canTouchEfiVariables = true; " >> ${root}/configuration.nix
echo "      grub.enable = false; " >> ${root}/configuration.nix
echo "    }; " >> ${root}/configuration.nix
echo "  }; " >> ${root}/configuration.nix
echo "  time.timeZone = '${timezone}'  ">> ${root}/configuration.nix
echo "  networking = { " >> ${root}/configuration.nix
echo "    hostName = 'SpaceBusOS_${eddition}'; # SPACE BUS!!!!!!! " >> ${root}/configuration.nix
echo "    useDHCP = false;" >> ${root}/configuration.nix
echo "    interfaces.enp37s0.useDHCP = false; " >> ${root}/configuration.nix
echo "    interfaces.tun0.useDHCP = false; " >> ${root}/configuration.nix
echo "    interfaces.wlp0s20f3.useDHCP = false;" >> ${root}/configuration.nix
echo "    networkmanager.enable = true;" >> ${root}/configuration.nix
echo "    # Configure network proxy if necessary " >> ${root}/configuration.nix
echo "    # proxy = {" >> ${root}/configuration.nix
echo '    #   default = "http://user:password@proxy:port/"; ' >> ${root}/configuration.nix
echo '    #   noProxy = "127.0.0.1,localhost,internal.domain"; ' >> ${root}/configuration.nix
echo "    # }; " >> ${root}/configuration.nix
echo "    firewall = { " >> ${root}/configuration.nix
echo "      enable = false; " >> ${root}/configuration.nix
echo "      #allowedTCPPorts = [ ... ]; " >> ${root}/configuration.nix #TODO add this
echo "      #allowedUDPPorts = [ ... ]; " >> ${root}/configuration.nix #TODO add this 
echo "    }; " >> ${root}/configuration.nix
echo "" >> ${root}/configuration.nix
echo "  }; " >> ${root}/configuration.nix
echo "" >> ${root}/configuration.nix
echo "" >> ${root}/configuration.nix

if [[ $DE != "none" ]]; then 
	echo "  services = { " >> ${root}/configuration.nix 
	echo "    xserver = { " >> ${root}/configuration.nix
	echo "    enable = true; " >> ${root}/configuration.nix
	echo "    displayManager.sddm.enable = true; " >> ${root}/configuration.nix
	case $DE in
	        "Plasma"|"plasma")
        	        echo "Error, Plasma Desltop or mobile not speccified. Please specify desktop or mobile"
	                exit 1
                	;;
        	"Plasma Desktop"|"plasma desktop"|"Plasma desktop")
			echo "    desktopManager.plasma5.enable = true; " >> ${root}/configuration.nix
                	;;
        	"Plasma Mobile"|"plasma mobile"|"Plasma mobile")
	                echo "$red WARNING: Plasma Mobile is currently sunsupported. $reset"
                	;;
        	"sway"|"SwayWM"|"Sway WM"|"sway wm"|"Sway wm")
	                echo "Proseeding with Sway WM install."
                	;;
        	"i3"|"i3wm"|"i3 wm"|"I3WM"|"I3 WM")
 	               	echo '    displayManager.defaultSession = "none+i3"'; >> ${root}/configuration.nix
			echo "    windowManager.i3 = { " >> ${root}/configuration.nix
			echo "      enable = true; " >> ${root}/configuration.nix
			echo "      extraPackages = with pkgs; [ " >> ${root}/configuration.nix
			echo "        dmenu #application launcher most people use " >> ${root}/configuration.nix
			echo "        i3status # gives you the default i3 status bar " >> ${root}/configuration.nix
			echo "        i3lock #default i3 screen locker " >> ${root}/configuration.nix
			echo "        i3blocks #if you are planning on using i3blocks over i3status " >> ${root}/configuration.nix
			echo "     ];" 
        	        ;;
		"xfce"|"XFCE")
			echo "    desktopManager = {" >> ${root}/configuration.nix
			echo "      xterm.enable = false;" >> ${root}/configuration.nix
			echo "      xfce.enable = true;" >> ${root}/configuration.nix
			echo "     };" >> ${root}/configuration.nix
			echo '    displayManager.defaultSession = "xfce";' >> ${root}/configuration.nix
			;;
			
	        *)
                	echo "Assuming no DE for install."
        	        ;;
	esac 
	
	echo "    layout = 'us'; " >> ${root}/configuration.nix
	echo "    libinput.enable = true; " >> ${root}/configuration.nix
	if [ $gpu == "nvidia" ]; then 
		echo '    videoDrivers = [ "modesetting" "nvidia" ]; #NOSYNC' >> ${root}/configuration.nix
		echo "     screenSection = '' #NOSYNC" >> ${root}/configuration.nix
		echo '      Option         "metamodes" "nvidia-auto-select +0+0 {ForceFullCompositionPipeline=On}" #NOSYNC ' >> ${root}/configuration.nix
		echo '      Option         "AllowIndirectGLXProtocol" "off" #NOSYNC ' >> ${root}/configuration.nix
		echo '      Option         "TripleBuffer" "on" #NOSYNC ' >> ${root}/configuration.nix
		echo "  ''; " >> ${root}/configuration.nix
	fi
fi 
echo "  openssh.enable = ture;" >> ${root}/configuration.nix
echo "  printing.enable = ture;" >> ${root}/configuration.nix
echo "  pipewire = {" >> ${root}/configuration.nix
echo "    enable = true" >> ${root}/configuration.nix
echo "    alsa = { " >> ${root}/configuration.nix
echo "      enable = ture;" >> ${root}/configuration.nix
echo "      support32bit = ture;" >> ${root}/configuration.nix
echo "    }; " >> ${root}/configuration.nix
echo "    pulse.enable = true;" >> ${root}/configuration.nix
echo "    jack.enable = true;" >> ${root}/configuration.nix
echo "  };" >> ${root}/configuration.nix
if [ $gpu == "nvidia" ]; then 
	echo "xmr-stack.cudaSupport = true; #NOSYNC" >> ${root}/configuration.nix
fi

if [ $eddition != "desktop" ]; then 
	echo "tlp = {" >> ${root}/configuration.nix
	echo "  enable = true;" >> ${root}/configuration.nix
	echo "  settings = { " >> ${root}/configuration.nix
	echo '     "SATA_LINKPWR_ON_BAT" =  "med_power_with_dipm"; ' >> ${root}/configuration.nix
	echo '     "USB_BLACKLIST_PHONE" = 1; ' >> ${root}/configuration.nix
	echo "  }; ">> ${root}/configuration.nix
	echo "};" >> ${root}/configuration.nix
fi
echo "};" >> ${root}/configuration.nix
echo "  sound.enable = true;" >> ${root}/configuration.nix
echo "  user.users.${username} = {" >> ${root}/configuration.nix
echo "    isNormalUser = true; " >> ${root}/configuration.nix
echo "    shell = pkgs.${shell}; " >> ${root}/configuration.nix
echo '    extraGroups = [ "networkmanager" "wheel" "kvm" "podman" "video"]; ' >> ${root}/configuration.nix 
echo "  }; " >> ${root}/configuration.nix
echo "  nix = { " >> ${root}/configuration.nix
echo "    package = pkgs.nixUnstable; " >> ${root}/configuration.nix
echo "    extra options = '' " >> ${root}/configuration.nix
echo "      experimental-features = ni-command flakes" >> ${root}/configuration.nix
echo "    ''; " >> ${root}/configuration.nix
echo "  }; " >> ${root}/configuration.nix

case $DE in
	"sway"|"SwayWM"|"Sway WM"|"sway wm"|"Sway wm")
		echo "  programs.sway = { " >> ${root}/configuration.nix
		echo "    enable = true; " >> ${root}/configuration.nix
		echo "    wrapperFeatures.gtk = true; " >> ${root}/configuration.nix
		echo "    extraPackages = with pkgs; [ " >> ${root}/configuration.nix
		echo "      swaylock " >> ${root}/configuration.nix
		echo "      swayidle " >> ${root}/configuration.nix
		echo "      wl-clipboard " >> ${root}/configuration.nix
		echo "      mako " >> ${root}/configuration.nix
		echo "      swaybg " >> ${root}/configuration.nix
		echo "      alacritty " >> ${root}/configuration.nix
		echo "      dmenue " >> ${root}/configuration.nix 
		echo "    ]; " >> ${root}/configuration.nix
		echo "  }; " >> ${root}/configuration.nix
                ;;
esac

echo "  nixpkgs = { " >> ${root}/configuration.nix 
echo "    config = { " >> ${root}/configuration.nix
case $GPU in 
	"nvidia" )
		echo "      allowUnfree = true;" >> ${root}/configuration.nix
		;;
esac
echo "    packageOverride = pkgs: { " >> ${root}/configuration.nix
echo '      nur = import (builtins.fetchTarball "https://github.com/nix-community/NUR/archive/master.tar.gz") { inherit pkgs; }; ' >> ${root}/configuration.nix
echo "    }; " >> ${root}/configuration.nix
echo "  }; " >> ${root}/configuration.nix
echo "  environment.systemPackages = with pkgs; [ " >> ${root}/configuration.nix
echo "    neovim " >> ${root}/configuration.nix
echo "    ${shell} " >> ${root}/configuration.nix
case $GPU in 
	"nvidia" )
		echo "nvidia-offload" >> ${root}/configuration.nix
		;;
esac
echo "    brightnessctl " >> ${root}/configuration.nix
echo "  ]; " >> ${root}/configuration.nix
echo "  hardware = { " >> ${root}/configuration.nix
if [ $gpu == "nvidia-prime" ]; then #TODO Add support for Nvidia Prime. 
	{
        echo '    nvidia.prime = { #NOSYNC >> ${root}/configuration.nix
      	          offload.enable = true; #NOSYNC>> ${root}/configuration.nix
                  intelBusId = "PCI:00:02:0"; #NOSYNC>> ${root}/configuration.nix
                  nvidiaBusId = "PCI:23:00:0"; #NOSYNC>> ${root}/configuration.nix
	  }; #NOSYNC >> ${root}/configuration.nix'
	} >> ${root}/configuration.nix 
fi

{
echo '
    opengl = {
      extraPackages = with pkgs; [
              intel-media-driver
              vaapiIntel
              vaapiVdpau
              libvdpau-va-gl
             ];
           }; 
    virtualisation = {
      docker.enable = false;
      podman = {
        enable = true;
        dockerSocket.enable = true;
        defaultNetwork.dnsname.enable = true;
      };
    };'
} >> ${root}/configuration.nix

{
echo ' 
# ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
# ||/////||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||/////||
# ||//||||||||/////|||||||||||||||||||||||||||||||||||||||||||||///////|||||||||||||||||||||||||//////||||//////||||||||//||
# ||//||||||//|||||||||//////|||||/////|||||||////||||||////||||//||||//|||/||||//||||/////||||//||||//||//|||||||||||||//||
# ||//|||||||/////|||||//||||/|||||||||//|||//||||||||//||||/|||///////||||/||||//|||//||||||||/|||||//|||//////||||||||//||
# ||//||||||||||||//|||//||||//|||///////||//||||||||////////|||//||||//|||/||||//||||/////||||/|||||//||||||||//|||||||//||
# ||//||||||||||||//|||//||||/|||//||||//|||//||||||||/|||||||||//||||//|||/||||//||||||||//|||//||||/|||||||||//|||||||//||
# ||//|||||||//////||||//////|||||////||/|||||////||||||/////|||//////||||||///||/|||//////||||||////|||||//////||||||||//||
# ||/////||||||||||||||//||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||/////||
# |||||||||||||||||||||//|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
# ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
{pkgs, config, lib, ...}:
{
  home.packages = with pkgs; [
    fd
    wofi
    ffmpeg
    delta
    ag
    mcfly
    cheat
    clipman
    procs
    httpie
    curlie
    zoxide
    dogdns
    gitoxide
    pciutils
    exa
    wget
    bat
    neofetch
    duff
    bottom
    niv
    #shells
    elvish
    ion
    tcsh
    xonsh
    ripgrep
    ripgrep-all
    imagemagick6Big
    zip
    grimshot
'
} > home.nix

if [ "$DE" == "sway" ]; then 
	echo '  xdg.configFile."sway/config".text = ' >> home.nix
	echo "    '' " >> home.nix
	{
	echo '
	  exec wl-paste -t text --watch clipman store
          exec waybar
          # SpaceBusOS default config for sway 
	  # DO NOT EDIT THIS FILE. Edit .config/nixpkgs/home.nix instead
	  #
	  # Read `man 5 sway` for a complete reference.
          ### Variables
          #
          # Logo key. Use Mod1 for Alt.
          set $mod Mod4
          # Home row direction keys, like vim
	  set $left h
	  set $down j
	  set $up k
set $right l

# Your preferred application launcher
# Note: pass the final command to swaymsg so that the resulting window can be opened
# on the original workspace that the command was run on.
# set $menu dmenu_path | dmenu | xargs swaymsg exec --
# set $menu wofi --show run
set $title dropdown
set $term alacritty -t $title
exec $term
for_window [title="$title"] move container to scratchpad
### Output configuration
#
# Default wallpaper (more resolutions are available in @datadir@/backgrounds/sway/)
#output * bg @datadir@/backgrounds/sway/Sway_Wallpaper_Blue_1920x1080.png fill
#
# Example configuration:
#
#   output HDMI-A-1 resolution 1920x1080 position 1920,0
#
# You can get the names of your outputs by running: swaymsg -t get_outputs

### Idle configuration
#
# Example configuration:
#
 exec swayidle -w \
          timeout 300 'swaylock -f -c 000000' \
          timeout 600 'swaymsg "output * dpms off"' resume 'swaymsg "output * dpms on"' \
          before-sleep 'swaylock -f -c 000000'
#
# This will lock your screen after 300 seconds of inactivity, then turn off
# your displays after another 300 seconds, and turn your screens back on when
# resumed. It will also lock your screen before your computer goes to sleep.

### Input configuration
#
# Example configuration:
#
	  '
  	} >> home.nix
fi












case $output_format in
    "plain")
        exit 0
        ;;
    "amazon")
        echo "Creating Amazon EC2 image. $red WARRNING! Home manager configs are not currently supported in EC2"
        nix run github:nix-community/nixos-generators -- -f amazon -c $root/configuration.nix
        ;;
    *)
        echo "Error, unrecognized option"
        exit 1
        ;;
esac






